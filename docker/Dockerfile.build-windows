# escape=`

# This kinda funny-looking Dockerfile successfully builds go-livepeer on Windows
# using mingw64. It has a dynamic depenency on a variety of mingw64 DLLs, so its
# artifact is a zip file that contains livepeer.exe, livepeer-cli.exe, and a
# handful of DLLs. `docker cp` does work on Windows, but only for stopped containers.

# To build windows executable, just run `.\docker\windowsbuild.ps1`.

# escape=`

# Builds ffmpeg libs on windows. To be used as base image
# for building livepeer no on windows.

# docker build -m 4gb -t livepeer/ffmpeg-base:windows -f Dockerfile.ffmpeg-windows .
# docker push livepeer/ffmpeg-base:windows

FROM mcr.microsoft.com/windows/servercore:ltsc2019

WORKDIR c:/temp

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

# Download and extract MSYS2 with 7zip.

RUN Invoke-WebRequest -UserAgent 'DockerCI' -outfile 7zsetup.exe http://www.7-zip.org/a/7z1604-x64.exe

RUN Start-Process .\7zsetup -ArgumentList '/S /D=c:/7zip' -Wait

RUN (new-object System.Net.WebClient).DownloadFile('http://repo.msys2.org/distrib/msys2-x86_64-latest.tar.xz','C:\temp\msys2-x86_64-latest.tar.xz')
RUN Get-FileHash -Path msys2-x86_64-latest.tar.xz
RUN C:\7zip\7z e msys2-x86_64-latest.tar.xz -Wait
RUN C:\7zip\7z x msys2-x86_64-latest.tar -o"C:\\"

# Install MSYS2 and our required packages

RUN Write-Host 'Updating MSYSTEM and MSYSCON ...'; `
  [Environment]::SetEnvironmentVariable('MSYSTEM', 'MSYS2', [EnvironmentVariableTarget]::Machine); `
  [Environment]::SetEnvironmentVariable('MSYSCON', 'defterm', [EnvironmentVariableTarget]::Machine);

RUN C:\msys64\usr\bin\bash.exe -l -c 'exit 0'; `
  C:\msys64\usr\bin\bash.exe -l -c 'echo "Now installing MSYS2..."'; `
  C:\msys64\usr\bin\bash.exe -l -c 'pacman -Syuu --needed --noconfirm --noprogressbar --ask=20'; `
  C:\msys64\usr\bin\bash.exe -l -c 'pacman -Syu  --needed --noconfirm --noprogressbar --ask=20'; `
  C:\msys64\usr\bin\bash.exe -l -c 'pacman -Su   --needed --noconfirm --noprogressbar --ask=20'; `
  # Install our packages. Use the mingw-w64-x86_64 version of everything run-time; MSYS2 is apparently slower?
  C:\msys64\usr\bin\bash.exe -l -c 'pacman -S perl binutils git make autoconf zip mingw-w64-x86_64-gcc mingw-w64-x86_64-libtool mingw-w64-x86_64-gnutls mingw-w64-x86_64-go mingw-w64-x86_64-pkg-config mingw-w64-x86_64-python2 --noconfirm --noprogressbar --ask=20'; `
  C:\msys64\usr\bin\bash.exe -l -c 'pacman -Scc --noconfirm'; `
  C:\msys64\usr\bin\bash.exe -l -c 'echo "Successfully installed MSYS2"'; `
  # MSYS2 leaves processes running or something - this step hangs? Hard shutdown to fix that.
  Stop-Computer -Force

WORKDIR C:\msys64\go\src\github.com\livepeer\go-livepeer

ADD docker/run.sh C:\msys64\usr\bin\run.sh

# Tell MSYS2 not to do "cd $HOME" all the freakin' time
ENV CHERE_INVOKING 1
ENV PATH "/mingw64/bin:/go/bin:/usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Windows/System32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0/:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl"
ENV HOME /build
ENV GOPATH "/go"
ENV CLOUDSDK_PYTHON /usr/bin/python2

SHELL ["C:\\msys64\\usr\\bin\\bash.exe", "/usr/bin/run.sh"]

RUN python2 --version

CMD ["C:\\msys64\\usr\\bin\\bash.exe"]




# # Install FFMpeg, nasm, x264
# ADD install_ffmpeg.sh ./install_ffmpeg.sh
# RUN ./install_ffmpeg.sh

# RUN  C:\msys64\usr\bin\bash.exe -l -c '/c/temp/install_ffmpeg.sh';

# # These three steps adapted from Dockerfile.debian.auto. They build the Golang binary.
# RUN C:\msys64\usr\bin\bash.exe -l -c 'export PATH="$PATH:/usr/bin:/mingw64/bin"; export GOROOT="/mingw64/lib/go"; export GOPATH="/go"; go get github.com/golang/glog && go get github.com/ericxtang/m3u8 && go get github.com/aws/aws-sdk-go/aws && go get -u google.golang.org/grpc && go get github.com/pkg/errors && go get github.com/stretchr/testify/mock && go get -u -v go.opencensus.io/stats && go get -u -v go.opencensus.io/tag && go get -u -v contrib.go.opencensus.io/exporter/prometheus'

# COPY . C:\msys64\go\src\github.com\livepeer\go-livepeer

# RUN C:\msys64\usr\bin\bash.exe -l -c 'set -x; export PATH="$PATH:/usr/bin:/mingw64/bin"; export GOROOT="/mingw64/lib/go"; export GOPATH="/go"; export PKG_CONFIG_PATH=/build/compiled/lib/pkgconfig:/mingw64/lib/pkgconfig; cd /go/src/github.com/livepeer/go-livepeer && git describe --always --long --dirty > .git.describe && go build -ldflags=\\\"-X github.com/livepeer/go-livepeer/core.LivepeerVersion=$(cat VERSION)-$(cat .git.describe)\\\" -v cmd/livepeer/livepeer.go && go build -ldflags=\\\"-X github.com/livepeer/go-livepeer/core.LivepeerVersion=$(cat VERSION)-$(cat .git.describe)\\\" -v ./cmd/livepeer_cli/*'

# RUN New-Item -ItemType "directory" -Path "c:\temp\livepeer-windows-amd64"; `
#   Copy-Item -Destination c:\temp\livepeer-windows-amd64 -Path `
#   C:\msys64\go\src\github.com\livepeer\go-livepeer\*.exe; `
#   cd C:\msys64\mingw64\bin; `
#   Copy-Item `
#   -Destination C:\temp\livepeer-windows-amd64 `
#   -Path `
#   # This list was produced by `ldd livepeer.exe`
#   .\libffi-6.dll,`
#   .\libgcc_s_seh-1.dll,`
#   .\libgmp-10.dll,`
#   .\libgnutls-30.dll,`
#   .\libhogweed-4.dll,`
#   .\libiconv-2.dll,`
#   .\libidn2-0.dll,`
#   .\libintl-8.dll,`
#   .\libnettle-6.dll,`
#   .\libp11-kit-0.dll,`
#   .\libtasn1-6.dll,`
#   .\libunistring-2.dll,`
#   .\libwinpthread-1.dll,`
#   .\zlib1.dll;`
#   cd C:\temp; `
#   C:\7zip\7z a -tzip .\livepeer-windows-amd64.zip .\livepeer-windows-amd64
